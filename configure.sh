#!/bin/bash

# Ubuntu Server Security Hardening Script
# This script installs fail2ban, hardens SSH, configures UFW, and creates admin user
# Usage: sudo ./configure.sh [username]
# If no username is provided, defaults to 'qadmin'

# Critical Warning: After running this script, you'll only be able to connect via SSH on port 31221 
# using the qadmin user with key-based authentication. Make sure to test the connection before closing 
# your current session!

set -e  # Exit on any error

# Parse command line arguments
USERNAME="${1:-qadmin}"

# Validate username
if [[ ! "$USERNAME" =~ ^[a-z][a-z0-9_-]*$ ]]; then
    echo "Error: Username must start with a lowercase letter and contain only lowercase letters, numbers, hyphens, and underscores"
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# SSH Port Configuration
SSH_PORT=31221

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   print_error "This script must be run as root (use sudo)"
   exit 1
fi

print_status "Starting Ubuntu server security hardening..."

# 1. Update system packages
print_status "Updating system packages..."
apt update && apt upgrade -y
print_success "System packages updated"

# 2. Install fail2ban
print_status "Installing fail2ban..."
apt install -y fail2ban
print_success "fail2ban installed"

# 3. Install UFW if not already installed
print_status "Installing UFW..."
apt install -y ufw
print_success "UFW installed"

# 4. Create admin user
print_status "Creating $USERNAME user..."
if getent passwd "$USERNAME" >/dev/null 2>&1; then
    print_warning "User $USERNAME already exists, skipping creation"
else
    adduser --gecos "" --disabled-password "$USERNAME"
    usermod -aG sudo "$USERNAME"
    print_success "User $USERNAME created and added to sudo group"

    # Set up SSH directory for admin user
    mkdir -p "/home/$USERNAME/.ssh"
    chmod 700 "/home/$USERNAME/.ssh"
    chown "$USERNAME:$USERNAME" "/home/$USERNAME/.ssh"

    print_warning "IMPORTANT: You need to set up SSH key authentication for $USERNAME user!"
    print_warning "Run: sudo -u $USERNAME ssh-keygen -t ed25519 -C '$USERNAME@$(hostname)'"
    print_warning "Then add your public key to /home/$USERNAME/.ssh/authorized_keys"
fi

# 5. Configure SSH hardening
print_status "Configuring SSH hardening..."
cat > /etc/ssh/sshd_config << EOF
# SSH Configuration - Security Hardened
# Generated by Ubuntu Security Hardening Script

# Basic Configuration
Port ${SSH_PORT}
Protocol 2
AddressFamily inet

# Authentication
PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Allow only admin user
AllowUsers $USERNAME

# Security Settings
LoginGraceTime 5
MaxAuthTries 1
MaxSessions 2

# Rate limiting
MaxStartups 5:30:30
# 0-5 connections:    Accept all
# 6-29 connections:   Drop 30% randomly
# 30+ connections:    Drop all new connections

# Disable dangerous features
X11Forwarding no
AllowAgentForwarding no
GatewayPorts clientspecified
PermitTunnel no

# Host-based authentication
HostbasedAuthentication no
IgnoreRhosts yes

# Logging
SyslogFacility AUTH
LogLevel VERBOSE

# Client settings
ClientAliveInterval 300
ClientAliveCountMax 2

# Compression
Compression no

# Use strong ciphers and algorithms
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512

# Banner
Banner /etc/ssh/banner

# Disable tunnelling for everyone by default, except for admin
AllowTcpForwarding no
Match User $USERNAME
    AllowTcpForwarding yes
EOF

# Create SSH banner
cat > /etc/ssh/banner << EOF
 ▗▄▖ ▗▖ ▗▖▗▄▄▄▖▗▖ ▗▖ ▗▄▖ ▗▄▄▖ ▗▄▄▄▖▗▄▄▄▄▖ ▗▄▖▗▄▄▄▖▗▄▄▄▖ ▗▄▖ ▗▖  ▗▖
▐▌ ▐▌▐▌ ▐▌  █  ▐▌ ▐▌▐▌ ▐▌▐▌ ▐▌  █     ▗▞▘▐▌ ▐▌ █    █  ▐▌ ▐▌▐▛▚▖▐▌
▐▛▀▜▌▐▌ ▐▌  █  ▐▛▀▜▌▐▌ ▐▌▐▛▀▚▖  █   ▗▞▘  ▐▛▀▜▌ █    █  ▐▌ ▐▌▐▌ ▝▜▌
▐▌ ▐▌▝▚▄▞▘  █  ▐▌ ▐▌▝▚▄▞▘▐▌ ▐▌▗▄█▄▖▐▙▄▄▄▖▐▌ ▐▌ █  ▗▄█▄▖▝▚▄▞▘▐▌  ▐▌
             ▗▄▄▖ ▗▄▄▄▖▗▄▄▄▖ ▗▖ ▗▖▗▄▄▄▖▗▄▄▖ ▗▄▄▄▖▗▄▄▄             
             ▐▌ ▐▌▐▌   ▐▌ ▐▌ ▐▌ ▐▌  █  ▐▌ ▐▌▐▌   ▐▌  █            
             ▐▛▀▚▖▐▛▀▀▘▐▌ ▐▌ ▐▌ ▐▌  █  ▐▛▀▚▖▐▛▀▀▘▐▌  █            
             ▐▌ ▐▌▐▙▄▄▖▐▙▄▟▙▖▝▚▄▞▘▗▄█▄▖▐▌ ▐▌▐▙▄▄▖▐▙▄▄▀            

EOF

print_success "SSH configuration hardened"

# 6. Configure fail2ban
print_status "Configuring fail2ban..."

# Create fail2ban local configuration
cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
# Global settings
bantime = 3600
findtime = 600
maxretry = 3
backend = systemd

# Email notifications (configure as needed)
# destemail = admin@yourdomain.com
# sendername = Fail2Ban
# mta = sendmail

[sshd]
enabled = true
port = ${SSH_PORT}
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
findtime = 600
bantime = 7200

[sshd-ddos]
enabled = true
port = ${SSH_PORT}
filter = sshd-ddos
logpath = /var/log/auth.log
maxretry = 6
findtime = 600
bantime = 3600
EOF

# Create custom filter for SSH attacks
cat > /etc/fail2ban/filter.d/sshd-aggressive.conf << EOF
[Definition]
failregex = ^%(__prefix_line)sAuthentication failure for .* from <HOST>
            ^%(__prefix_line)sUser .* from <HOST> not allowed because not listed in AllowUsers
            ^%(__prefix_line)sUser .* from <HOST> not allowed because listed in DenyUsers
            ^%(__prefix_line)sUser .* from <HOST> not allowed because not in any group
            ^%(__prefix_line)srefused connect from \S+ \(<HOST>\)
            ^%(__prefix_line)sReceived disconnect from <HOST>: 3: .*: Auth fail [preauth]
            ^%(__prefix_line)sSSH: Server;Ltype: Authname;Remote: <HOST>-\d+;Name: [^;]*;Reason: (.*)
            ^%(__prefix_line)sConnection closed by authenticating user .* <HOST> port .* \[preauth\]
            ^%(__prefix_line)sFailed .* for .* from <HOST>(?: port \d*)?(?: ssh\d*)?
            ^%(__prefix_line)sInvalid user .* from <HOST>

ignoreregex =
EOF

print_success "fail2ban configured"

# 7. Configure UFW
print_status "Configuring UFW firewall..."

# Reset UFW to defaults
ufw --force reset

# Set default policies
ufw default deny incoming
ufw default allow outgoing

# Allow SSH on custom port
ufw allow ${SSH_PORT}/tcp comment 'SSH'

# Enable UFW
ufw --force enable

print_success "UFW firewall configured and enabled"

# 8. Start and enable services
print_status "Starting and enabling services..."

# Test SSH configuration
if sshd -t; then
    print_success "SSH configuration is valid"
    systemctl restart sshd
    systemctl enable sshd
else
    print_error "SSH configuration is invalid! Please check the configuration."
    exit 1
fi

# Start fail2ban
systemctl restart fail2ban
systemctl enable fail2ban

print_success "All services started and enabled"

# 10. Display status and important information
print_status "Security hardening completed!"

echo
print_success "=== SECURITY HARDENING SUMMARY ==="
echo -e "${GREEN}✓${NC} fail2ban installed and configured"
echo -e "${GREEN}✓${NC} SSH hardened (Port: ${SSH_PORT})"
echo -e "${GREEN}✓${NC} UFW firewall enabled"
echo -e "${GREEN}✓${NC} User '$USERNAME' created"
echo -e "${GREEN}✓${NC} Root SSH login disabled"

echo
print_warning "=== IMPORTANT NEXT STEPS ==="
echo -e "${YELLOW}1.${NC} Set password for $USERNAME: ${BLUE}sudo passwd $USERNAME${NC}"
echo -e "${YELLOW}2.${NC} Set up SSH key authentication for $USERNAME:"
echo -e "   ${BLUE}sudo -u $USERNAME ssh-keygen -t ed25519 -C '$USERNAME@$(hostname)'${NC}"
echo -e "${YELLOW}3.${NC} Add your public key to: ${BLUE}/home/$USERNAME/.ssh/authorized_keys${NC}"
echo -e "${YELLOW}4.${NC} Test SSH connection on port ${SSH_PORT} before logging out:"
echo -e "   ${BLUE}ssh -p ${SSH_PORT} $USERNAME@$(hostname -I | awk '{print $1}')${NC}"

echo
print_warning "=== FIREWALL STATUS ==="
ufw status verbose

echo
print_warning "=== FAIL2BAN STATUS ==="
fail2ban-client status

echo
print_error "=== CRITICAL WARNING ==="
print_error "Your SSH port has been changed to ${SSH_PORT}"
print_error "Make sure you can connect with the $USERNAME user before closing this session!"
print_error "Test command: ssh -p ${SSH_PORT} $USERNAME@your_server_ip"

# Create a quick reference file
cat > /root/security_hardening_info.txt << EOF
Ubuntu Security Hardening - Quick Reference
==========================================
Date: $(date)
SSH Port: ${SSH_PORT}
Admin User: $USERNAME
Root SSH: Disabled

Important Files:
- SSH Config: /etc/ssh/sshd_config
- fail2ban Config: /etc/fail2ban/jail.local
- UFW Status: ufw status

Useful Commands:
- Check fail2ban status: fail2ban-client status
- Unban IP: fail2ban-client set sshd unbanip <IP>
- UFW status: ufw status verbose
- SSH config test: sshd -t

Remember to:
1. Set password for $USERNAME
2. Set up SSH keys for $USERNAME
3. Test SSH connection before closing current session
EOF

print_success "Quick reference saved to /root/security_hardening_info.txt"

echo
print_success "Security hardening script completed successfully!"
